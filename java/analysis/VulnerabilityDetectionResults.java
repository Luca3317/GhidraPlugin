package analysis;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Set;

import ghidra.program.model.address.Address;
import ghidra.program.model.listing.Function;
import ghidra.program.model.pcode.HighFunction;
import ghidra.program.model.pcode.HighVariable;

public class VulnerabilityDetectionResults {

	private HashMap<HighFunction, Set<HighVariable>> potentialVars;
	private HashMap<HighFunction, Set<HighVariable>> inherentVars;
	
	private HashMap<HighFunction, Set<Address>> potentialAddrs;
	private HashMap<HighFunction, Set<Address>> inherentAddrs;
	private HashMap<HighFunction, Set<Address>> unknownAddrs;
	
	private LinkedHashSet<Function> potentialNotTiedToVar;
	private LinkedHashSet<Function> inherentNotTiedToVar;
	
	private String description;
	
	
	public VulnerabilityDetectionResults(String desc) {
		
		potentialVars = new LinkedHashMap<HighFunction, Set<HighVariable>>();
		inherentVars = new LinkedHashMap<HighFunction, Set<HighVariable>>();

		potentialAddrs = new LinkedHashMap<HighFunction, Set<Address>>();
		inherentAddrs = new LinkedHashMap<HighFunction, Set<Address>>();
		unknownAddrs = new LinkedHashMap<HighFunction, Set<Address>>();

		potentialNotTiedToVar = new LinkedHashSet<Function>();
		inherentNotTiedToVar = new LinkedHashSet<Function>();
		
		description = desc;
	}
	
	public String getDescription() {
		
		return description;
	}
	
	public Set<HighFunction> getDetectedFunctions() {
		
		Set<HighFunction> funcs = new LinkedHashSet<HighFunction>();
		
		funcs.addAll(potentialVars.keySet());
		funcs.addAll(inherentVars.keySet());
		
		funcs.addAll(potentialAddrs.keySet());
		funcs.addAll(inherentAddrs.keySet());
		funcs.addAll(unknownAddrs.keySet());
		
		return funcs;
	}
	
	public Set<HighFunction> getDetectedPotentialFunctions() {
		
		Set<HighFunction> funcs = new LinkedHashSet<HighFunction>();
		
		funcs.addAll(potentialVars.keySet());
		funcs.addAll(potentialAddrs.keySet());
		
		return funcs;
	}
	
	public Set<HighFunction> getDetectedInherentFunctions() {
		
		Set<HighFunction> funcs = new LinkedHashSet<HighFunction>();
		
		funcs.addAll(inherentVars.keySet());
		funcs.addAll(inherentAddrs.keySet());
		
		return funcs;
	}
	
	public Set<HighFunction> getDetectedUnknownFunctions() {
		
		return new LinkedHashSet<HighFunction>(unknownAddrs.keySet());
	}
	
	
	public void addPotential(HighVariable var) {
		
		if (!potentialVars.containsKey(var.getHighFunction()))
			potentialVars.put(var.getHighFunction(), new LinkedHashSet<HighVariable>());
		
		potentialVars.get(var.getHighFunction()).add(var);
	}
	
	public void addInherent(HighVariable var) {
		
		if (!inherentVars.containsKey(var.getHighFunction()))
			inherentVars.put(var.getHighFunction(), new LinkedHashSet<HighVariable>());
		
		inherentVars.get(var.getHighFunction()).add(var);
	}
	
	public void addPotential(HighFunction func, Address addr) {
		
		if (!potentialAddrs.containsKey(func))
			potentialAddrs.put(func, new LinkedHashSet<Address>());
		
		potentialAddrs.get(func).add(addr);
	}
	
	public void addInherent(HighFunction func, Address addr) {
		
		if (!inherentAddrs.containsKey(func))
			inherentAddrs.put(func, new LinkedHashSet<Address>());
		
		inherentAddrs.get(func).add(addr);
	}
	
	public void addUnknown(HighFunction func, Address addr) {
		
		if (!unknownAddrs.containsKey(func))
			unknownAddrs.put(func, new LinkedHashSet<Address>());
		
		unknownAddrs.get(func).add(addr);
	}

	public void addPotential(Function func) {
		potentialNotTiedToVar.add(func);
	}
	
	public void addInherent(Function func) {
		inherentNotTiedToVar.add(func);
	}
	
	
	public LinkedHashSet<HighVariable> getPotentialVars(HighFunction func) {
		
		if (!potentialVars.containsKey(func))
			return new LinkedHashSet<HighVariable>();
			
		return new LinkedHashSet<HighVariable>(potentialVars.get(func));
	}

	public LinkedHashSet<HighVariable> getInherentVars(HighFunction func) {
		
		if (!inherentVars.containsKey(func))
			return new LinkedHashSet<HighVariable>();
			
		return new LinkedHashSet<HighVariable>(inherentVars.get(func));
	}
	
	public LinkedHashSet<HighVariable> getVars(HighFunction func) {
		
		LinkedHashSet<HighVariable> vars = new LinkedHashSet<HighVariable>();
		
		if (potentialVars.containsKey(func))
			vars.addAll(potentialVars.get(func));
		
		if (inherentVars.containsKey(func))
			vars.addAll(inherentVars.get(func));
		
		return vars;
	}

	public LinkedHashSet<Address> getPotentialAddrs(HighFunction func) {
		
		if (!potentialAddrs.containsKey(func))
			return new LinkedHashSet<Address>();
			
		return new LinkedHashSet<Address>(potentialAddrs.get(func));
	}
	
	public LinkedHashSet<Address> getInherentAddrs(HighFunction func) {
		
		if (!inherentAddrs.containsKey(func))
			return new LinkedHashSet<Address>();
			
		return new LinkedHashSet<Address>(inherentAddrs.get(func));
	}
	
	public LinkedHashSet<Address> getUnknownAddrs(HighFunction func) {
		
		if (!unknownAddrs.containsKey(func))
			return new LinkedHashSet<Address>();
			
		return new LinkedHashSet<Address>(unknownAddrs.get(func));
	}

	public LinkedHashSet<Address> getAddrs(HighFunction func) {
		
		LinkedHashSet<Address> addrs = new LinkedHashSet<Address>();
		
		if (potentialAddrs.containsKey(func))
			addrs.addAll(potentialAddrs.get(func));
		
		if (inherentAddrs.containsKey(func))
			addrs.addAll(inherentAddrs.get(func));
		
		return addrs;
	}
	
	public Set<Function> getPotentialNotTiedToVars() {
		return new LinkedHashSet<Function>(potentialNotTiedToVar);
	}
	
	public Set<Function> getInherentNotTiedToVars() {
		return new LinkedHashSet<Function>(inherentNotTiedToVar);
	}

	public Set<Function> getNotTiedToVars() {
		Set<Function> funcs = new LinkedHashSet<Function>();
		
		funcs.addAll(potentialNotTiedToVar);
		funcs.addAll(inherentNotTiedToVar);
		
		return funcs;
	}
}